unit parselivetennis_module;

interface
  uses
   SysUtils, Variants, Classes, SHDocVw,mshtml, workwithdb_module, globalfunc,
  olimpbase_module,RegularExpressions;
   type
   staketemp=record
     sttype:string;
     stval:string;


   end;
   stakestemp=array of staketemp;

   parselivetennis_class=class(olimpbase_class)
   lc:livechampar;
   le:liveeventar;
   lsg:livestakegroupar;
    lst:livestaketypear;
    procedure parse;
    private
    id_sport,id_champ,id_event:integer;
    id_com1,id_com2:integer;
    id_stakegroup:integer;
    olimpdate:string;
    sts:stakestemp;
    com1,com2:string;
    odate:string;
    mcchecked:boolean;
    checkedchamp:ari;
    situationstr:string;
    procedure parsemc(tr:ihtmlelement);
      procedure parsehi(tr:ihtmlelement);
     procedure parsetr (tr:ihtmlelement);
     procedure parsenobr(nbr:ihtmlelement);
    procedure insertstakeindb;
    procedure parseinnerb(s:string);
    procedure parseeventtd(td:ihtmlelement);
    procedure parseeventstr(s: string);
   end;
implementation

{ parselivetennis_class }

procedure parselivetennis_class.insertstakeindb;
begin

end;

procedure parselivetennis_class.parse;
var
at:attrs;
 trs,tds,inputs:ihtmlelementcollection;
 tr,td,inp:ihtmlelement;
 i,j,champind:integer;
 sqlstr:string;

begin
  mcchecked:=false;
     setlength(checkedchamp,0);
doc:=wb.Document as ihtmldocument2;
  setlength(at,1);
  at[0].name:='name';
  at[0].value:='BetLine';
  findform(at);
  if not assigned(form) then exit;
  trs:=form.all as ihtmlelementcollection;
  trs:=trs.tags('TR')as ihtmlelementcollection;
  for I := 0 to trs.length-1 do
    begin
      tr:=trs.item(i,0) as ihtmlelement;
      if tr.className='m_c' then
      begin
        parsemc(tr);
if error>0 then exit;

        continue;
      end;
      if not mcchecked then  continue;

       if tr.className='hi' then
      begin
        parsehi(tr);
if error>90 then exit;

        continue;
      end;
      parsetr(tr);
    end;

end;

procedure parselivetennis_class.parseeventstr(s: string);
begin

end;

procedure parselivetennis_class.parseeventtd(td: ihtmlelement);
var
fonts,imgs:ihtmlelementcollection;
font,img:ihtmlelement;
i,j,k:integer;
s,s1,s2,sqlstr:string;
 rg,rg1:tregex;
mch:tmatch;
gr:tgroup;
begin
s:=td.innerText;
i:=pos(' - ',s);
s1:=copy(s,1,i-1);
s2:=td.innerHTML;
i:=pos('<img alt="Serve" src="/img/ball.png">',s2);

if i>0 then
begin
 j:=pos(s1,s2);
 if i<j then situationstr:='serve first.'
 else situationstr:='serve second.';

end
else
situationstr:='serve not defined.';
 fonts:=td.all as ihtmlelementcollection;
 if fonts.length>1 then
 begin
  font:=fonts.item(1,0) as ihtmlelement;
  s2:=font.innerText;
  situationstr:=situationstr+s2;
  i:=pos(s2,s);
  delete(s,i,1000);
  s:=trim(s);
 end;
 for I := 0 to length(le)-1 do
   begin
     if ((le[i].id_champ=id_champ) and(le[i].name=s)) then
      begin
        id_event:=le[i].id_event;
        exit;
      end;
   end;
  rg:=tregex.Create('(.*?)\s\-\s');
 rg1:=tregex.Create('\s\-\s(.*)');
 if rg.IsMatch(s) then
  begin
    mch:=rg.Match(s);
    gr:=mch.Groups[1];
    com1:=gr.Value;
    com1:=trim(com1);
    com1:=stringreplace(com1,'''','$$$',[rfreplaceall]);
    sqlstr:='findcom N'''+com1+''','+inttostr(id_sport)+','+inttostr(id_champ)+';';
    id_com1:=wwdb.oneinteger(sqlstr);
  end
  else error:=6;
  if error>0 then exit;
   if rg1.IsMatch(s) then
  begin
    mch:=rg1.Match(s);
    gr:=mch.Groups[1];
    com2:=gr.Value;
    com2:=trim(com2);
    com2:=stringreplace(com2,'''','$$$',[rfreplaceall]);
    sqlstr:='findcom N'''+com2+''','+inttostr(id_sport)+','+inttostr(id_champ)+';';
    id_com2:=wwdb.oneinteger(sqlstr);
  end
  else error:=7;
  if error>0 then exit;
  sqlstr:='findelivetennisvent N'''+odate+''','+inttostr(id_com1)+','+inttostr(id_com2)+','+inttostr(id_champ)+';';
  id_event:=wwdb.oneinteger(sqlstr);
    k:=length(le);
        setlength(le,k+1);
        le[k].id_champ:=id_champ;
        le[k].name:=s;
        le[k].id_event:=id_event;
end;

procedure parselivetennis_class.parsehi(tr: ihtmlelement);
var
i:integer;
tds,atags:ihtmlelementcollection;
td,a:ihtmlelement;
 s,sqlstr:string;

begin
tds:=tr.all as ihtmlelementcollection;
tds:=tds.tags('TD')   as  ihtmlelementcollection;
td:=tds.item(0,0) as ihtmlelement;

s:=td.innerText;
i:=pos(br,s);
if i>0 then  delete(s,i,1000);

s:=trim(s);
if not isolimpdate(s) then  error:=5;
if error>0 then exit;
 odate:=transformdate(s);
 td:=tds.item(1,0) as ihtmlelement;

parseeventtd(td);

end;

procedure parselivetennis_class.parseinnerb(s: string);
begin

end;

procedure parselivetennis_class.parsemc(tr: ihtmlelement);
var
s,sqlstr:string;
i,k:integer;
begin
mcchecked:=false;
  s:=tr.innerText;
 i:=pos(br,s);
 if i>0 then
 s:=copy(s,1,i-1);
 s:=trim(s);
  i:=pos('Tennis.',s);
  if i<4 then error:=2;
  if error>0  then
  begin
    writeer;
    exit;
  end;
  s:=copy(s,1,i+6);
  s:=trim(s);

  for I := 0 to length(lc)-1 do
   begin
     if lc[i].name=s then
       begin
       id_champ:=lc[i].id;
         mcchecked:=true;

         exit;

       end;

   end;


    sqlstr:='findchamp N'''+s+''',1;';
      id_champ:=wwdb.oneinteger(sqlstr);
  if id_champ>0 then
  begin
  mcchecked:=true;
    k:=length(lc);
        setlength(lc,k+1);
        lc[k].id:=id_champ;
        lc[k].name:=s;
  end;
end;

procedure parselivetennis_class.parsenobr(nbr: ihtmlelement);
begin

end;

procedure parselivetennis_class.parsetr(tr: ihtmlelement);
begin

end;

end.
